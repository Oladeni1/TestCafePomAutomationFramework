"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareSkipJsErrorsOptions = exports.ensureSkipJsErrorsCallbackWrapped = exports.isSkipJsErrorsOptionsObject = exports.isSkipJsErrorsCallbackWithOptionsObject = void 0;
const make_reg_exp_1 = require("../../utils/make-reg-exp");
const client_function_builder_1 = __importDefault(require("../../client-functions/client-function-builder"));
const SKIP_JS_ERRORS_OBJECT_FUNCTION = `
                let { stack, pageUrl, message } = deps;

                return stack.test(err.stack) && pageUrl.test(err.pageUrl) && message.test(err.message);
        `;
function isSkipJsErrorsCallbackWithOptionsObject(obj) {
    return !!obj && typeof obj === 'object' && 'fn' in obj;
}
exports.isSkipJsErrorsCallbackWithOptionsObject = isSkipJsErrorsCallbackWithOptionsObject;
function isSkipJsErrorsOptionsObject(obj) {
    return !!obj && typeof obj === 'object' && !isSkipJsErrorsCallbackWithOptionsObject(obj);
}
exports.isSkipJsErrorsOptionsObject = isSkipJsErrorsOptionsObject;
function ensureSkipJsErrorsCallbackWrapped(options, dependencies = {}) {
    if (typeof options === 'function')
        return wrapSkipJsErrorsCallback(options, dependencies);
    return options;
}
exports.ensureSkipJsErrorsCallbackWrapped = ensureSkipJsErrorsCallbackWrapped;
function wrapSkipJsErrorsCallback(options, dependencies) {
    return { fn: options, dependencies };
}
function prepareSkipJsErrorsOptions(options) {
    options = ensureSkipJsErrorsCallbackWrapped(options);
    if (isSkipJsErrorsCallbackWithOptionsObject(options))
        return createSkipJsErrorsCallbackFunction(options);
    if (isSkipJsErrorsOptionsObject(options))
        return createSkipJsErrorsObjectFunction(prepareOptionsObject(options));
    return options;
}
exports.prepareSkipJsErrorsOptions = prepareSkipJsErrorsOptions;
function createSkipJsErrorsObjectFunction(deps) {
    deps.message = deps.message || new RegExp('');
    deps.stack = deps.stack || new RegExp('');
    deps.pageUrl = deps.pageUrl || new RegExp('');
    const func = new Function('err', SKIP_JS_ERRORS_OBJECT_FUNCTION);
    const callbackWrapper = wrapSkipJsErrorsCallback(func, { deps });
    return createSkipJsErrorsCallbackFunction(callbackWrapper);
}
function createSkipJsErrorsCallbackFunction({ fn, dependencies }) {
    const methodName = 'skipJsErrors handler';
    const options = { dependencies };
    return new client_function_builder_1.default(fn, options, {
        instantiation: methodName,
        execution: methodName,
    }).getCommand();
}
function prepareOptionsObject(opts) {
    opts.message = (0, make_reg_exp_1.parseRegExpString)(opts.message);
    opts.stack = (0, make_reg_exp_1.parseRegExpString)(opts.stack);
    opts.pageUrl = (0, make_reg_exp_1.parseRegExpString)(opts.pageUrl);
    return opts;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXBpL3NraXAtanMtZXJyb3JzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUdBLDJEQUE2RDtBQUU3RCw2R0FBbUY7QUFFbkYsTUFBTSw4QkFBOEIsR0FBRzs7OztTQUk5QixDQUFDO0FBRVYsU0FBZ0IsdUNBQXVDLENBQUUsR0FBWTtJQUNqRSxPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLElBQUksSUFBSSxHQUFHLENBQUM7QUFDM0QsQ0FBQztBQUZELDBGQUVDO0FBRUQsU0FBZ0IsMkJBQTJCLENBQUUsR0FBWTtJQUNyRCxPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLENBQUMsdUNBQXVDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDN0YsQ0FBQztBQUZELGtFQUVDO0FBRUQsU0FBZ0IsaUNBQWlDLENBQUUsT0FBMkcsRUFBRSxlQUFnQyxFQUFFO0lBQzlMLElBQUksT0FBTyxPQUFPLEtBQUssVUFBVTtRQUM3QixPQUFPLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztJQUUzRCxPQUFPLE9BQU8sQ0FBQztBQUNuQixDQUFDO0FBTEQsOEVBS0M7QUFFRCxTQUFTLHdCQUF3QixDQUFFLE9BQTZCLEVBQUUsWUFBNkI7SUFDM0YsT0FBTyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLENBQUM7QUFDekMsQ0FBQztBQUVELFNBQWdCLDBCQUEwQixDQUFFLE9BQTJHO0lBQ25KLE9BQU8sR0FBRyxpQ0FBaUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVyRCxJQUFJLHVDQUF1QyxDQUFDLE9BQU8sQ0FBQztRQUNoRCxPQUFPLGtDQUFrQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXZELElBQUksMkJBQTJCLENBQUMsT0FBTyxDQUFDO1FBQ3BDLE9BQU8sZ0NBQWdDLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUUzRSxPQUFPLE9BQU8sQ0FBQztBQUNuQixDQUFDO0FBVkQsZ0VBVUM7QUFFRCxTQUFTLGdDQUFnQyxDQUFFLElBQStCO0lBQ3RFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM5QyxJQUFJLENBQUMsS0FBSyxHQUFLLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTlDLE1BQU0sSUFBSSxHQUFHLElBQUksUUFBUSxDQUFDLEtBQUssRUFBRSw4QkFBOEIsQ0FBeUIsQ0FBQztJQUV6RixNQUFNLGVBQWUsR0FBRyx3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBMEMsQ0FBQztJQUUxRyxPQUFPLGtDQUFrQyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQy9ELENBQUM7QUFFRCxTQUFTLGtDQUFrQyxDQUFFLEVBQUUsRUFBRSxFQUFFLFlBQVksRUFBeUM7SUFDcEcsTUFBTSxVQUFVLEdBQUcsc0JBQXNCLENBQUM7SUFDMUMsTUFBTSxPQUFPLEdBQU0sRUFBRSxZQUFZLEVBQUUsQ0FBQztJQUVwQyxPQUFPLElBQUksaUNBQXFCLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRTtRQUMxQyxhQUFhLEVBQUUsVUFBVTtRQUN6QixTQUFTLEVBQU0sVUFBVTtLQUM1QixDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDcEIsQ0FBQztBQUVELFNBQVMsb0JBQW9CLENBQUUsSUFBK0I7SUFDMUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFBLGdDQUFpQixFQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvQyxJQUFJLENBQUMsS0FBSyxHQUFLLElBQUEsZ0NBQWlCLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBQSxnQ0FBaUIsRUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFL0MsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgRGljdGlvbmFyeSwgU2tpcEpzRXJyb3JzQ2FsbGJhY2ssIFNraXBKc0Vycm9yc0NhbGxiYWNrV2l0aE9wdGlvbnNPYmplY3QsIFNraXBKc0Vycm9yc09wdGlvbnNPYmplY3QsXG59IGZyb20gJy4uLy4uL2NvbmZpZ3VyYXRpb24vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBwYXJzZVJlZ0V4cFN0cmluZyB9IGZyb20gJy4uLy4uL3V0aWxzL21ha2UtcmVnLWV4cCc7XG5pbXBvcnQgeyBFeGVjdXRlQ2xpZW50RnVuY3Rpb25Db21tYW5kIH0gZnJvbSAnLi4vLi4vdGVzdC1ydW4vY29tbWFuZHMvb2JzZXJ2YXRpb24nO1xuaW1wb3J0IENsaWVudEZ1bmN0aW9uQnVpbGRlciBmcm9tICcuLi8uLi9jbGllbnQtZnVuY3Rpb25zL2NsaWVudC1mdW5jdGlvbi1idWlsZGVyJztcblxuY29uc3QgU0tJUF9KU19FUlJPUlNfT0JKRUNUX0ZVTkNUSU9OID0gYFxuICAgICAgICAgICAgICAgIGxldCB7IHN0YWNrLCBwYWdlVXJsLCBtZXNzYWdlIH0gPSBkZXBzO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YWNrLnRlc3QoZXJyLnN0YWNrKSAmJiBwYWdlVXJsLnRlc3QoZXJyLnBhZ2VVcmwpICYmIG1lc3NhZ2UudGVzdChlcnIubWVzc2FnZSk7XG4gICAgICAgIGA7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NraXBKc0Vycm9yc0NhbGxiYWNrV2l0aE9wdGlvbnNPYmplY3QgKG9iajogdW5rbm93bik6IG9iaiBpcyBTa2lwSnNFcnJvcnNDYWxsYmFja1dpdGhPcHRpb25zT2JqZWN0IHtcbiAgICByZXR1cm4gISFvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgJ2ZuJyBpbiBvYmo7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NraXBKc0Vycm9yc09wdGlvbnNPYmplY3QgKG9iajogdW5rbm93bik6IG9iaiBpcyBTa2lwSnNFcnJvcnNPcHRpb25zT2JqZWN0IHtcbiAgICByZXR1cm4gISFvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgIWlzU2tpcEpzRXJyb3JzQ2FsbGJhY2tXaXRoT3B0aW9uc09iamVjdChvYmopO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlU2tpcEpzRXJyb3JzQ2FsbGJhY2tXcmFwcGVkIChvcHRpb25zOiBib29sZWFuIHwgU2tpcEpzRXJyb3JzT3B0aW9uc09iamVjdCB8IFNraXBKc0Vycm9yc0NhbGxiYWNrIHwgU2tpcEpzRXJyb3JzQ2FsbGJhY2tXaXRoT3B0aW9uc09iamVjdCwgZGVwZW5kZW5jaWVzOiBEaWN0aW9uYXJ5PGFueT4gPSB7fSk6IFNraXBKc0Vycm9yc09wdGlvbnNPYmplY3QgfCBTa2lwSnNFcnJvcnNDYWxsYmFja1dpdGhPcHRpb25zT2JqZWN0IHwgYm9vbGVhbiB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKVxuICAgICAgICByZXR1cm4gd3JhcFNraXBKc0Vycm9yc0NhbGxiYWNrKG9wdGlvbnMsIGRlcGVuZGVuY2llcyk7XG5cbiAgICByZXR1cm4gb3B0aW9ucztcbn1cblxuZnVuY3Rpb24gd3JhcFNraXBKc0Vycm9yc0NhbGxiYWNrIChvcHRpb25zOiBTa2lwSnNFcnJvcnNDYWxsYmFjaywgZGVwZW5kZW5jaWVzOiBEaWN0aW9uYXJ5PGFueT4pOiBTa2lwSnNFcnJvcnNDYWxsYmFja1dpdGhPcHRpb25zT2JqZWN0IHtcbiAgICByZXR1cm4geyBmbjogb3B0aW9ucywgZGVwZW5kZW5jaWVzIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlU2tpcEpzRXJyb3JzT3B0aW9ucyAob3B0aW9uczogYm9vbGVhbiB8IFNraXBKc0Vycm9yc09wdGlvbnNPYmplY3QgfCBTa2lwSnNFcnJvcnNDYWxsYmFjayB8IFNraXBKc0Vycm9yc0NhbGxiYWNrV2l0aE9wdGlvbnNPYmplY3QpOiBib29sZWFuIHwgRXhlY3V0ZUNsaWVudEZ1bmN0aW9uQ29tbWFuZCB7XG4gICAgb3B0aW9ucyA9IGVuc3VyZVNraXBKc0Vycm9yc0NhbGxiYWNrV3JhcHBlZChvcHRpb25zKTtcblxuICAgIGlmIChpc1NraXBKc0Vycm9yc0NhbGxiYWNrV2l0aE9wdGlvbnNPYmplY3Qob3B0aW9ucykpXG4gICAgICAgIHJldHVybiBjcmVhdGVTa2lwSnNFcnJvcnNDYWxsYmFja0Z1bmN0aW9uKG9wdGlvbnMpO1xuXG4gICAgaWYgKGlzU2tpcEpzRXJyb3JzT3B0aW9uc09iamVjdChvcHRpb25zKSlcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVNraXBKc0Vycm9yc09iamVjdEZ1bmN0aW9uKHByZXBhcmVPcHRpb25zT2JqZWN0KG9wdGlvbnMpKTtcblxuICAgIHJldHVybiBvcHRpb25zO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTa2lwSnNFcnJvcnNPYmplY3RGdW5jdGlvbiAoZGVwczogU2tpcEpzRXJyb3JzT3B0aW9uc09iamVjdCk6IEV4ZWN1dGVDbGllbnRGdW5jdGlvbkNvbW1hbmQge1xuICAgIGRlcHMubWVzc2FnZSA9IGRlcHMubWVzc2FnZSB8fCBuZXcgUmVnRXhwKCcnKTtcbiAgICBkZXBzLnN0YWNrICAgPSBkZXBzLnN0YWNrIHx8IG5ldyBSZWdFeHAoJycpO1xuICAgIGRlcHMucGFnZVVybCA9IGRlcHMucGFnZVVybCB8fCBuZXcgUmVnRXhwKCcnKTtcblxuICAgIGNvbnN0IGZ1bmMgPSBuZXcgRnVuY3Rpb24oJ2VycicsIFNLSVBfSlNfRVJST1JTX09CSkVDVF9GVU5DVElPTikgYXMgU2tpcEpzRXJyb3JzQ2FsbGJhY2s7XG5cbiAgICBjb25zdCBjYWxsYmFja1dyYXBwZXIgPSB3cmFwU2tpcEpzRXJyb3JzQ2FsbGJhY2soZnVuYywgeyBkZXBzIH0pIGFzIFNraXBKc0Vycm9yc0NhbGxiYWNrV2l0aE9wdGlvbnNPYmplY3Q7XG5cbiAgICByZXR1cm4gY3JlYXRlU2tpcEpzRXJyb3JzQ2FsbGJhY2tGdW5jdGlvbihjYWxsYmFja1dyYXBwZXIpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTa2lwSnNFcnJvcnNDYWxsYmFja0Z1bmN0aW9uICh7IGZuLCBkZXBlbmRlbmNpZXMgfTogU2tpcEpzRXJyb3JzQ2FsbGJhY2tXaXRoT3B0aW9uc09iamVjdCk6IEV4ZWN1dGVDbGllbnRGdW5jdGlvbkNvbW1hbmQge1xuICAgIGNvbnN0IG1ldGhvZE5hbWUgPSAnc2tpcEpzRXJyb3JzIGhhbmRsZXInO1xuICAgIGNvbnN0IG9wdGlvbnMgICAgPSB7IGRlcGVuZGVuY2llcyB9O1xuXG4gICAgcmV0dXJuIG5ldyBDbGllbnRGdW5jdGlvbkJ1aWxkZXIoZm4sIG9wdGlvbnMsIHtcbiAgICAgICAgaW5zdGFudGlhdGlvbjogbWV0aG9kTmFtZSxcbiAgICAgICAgZXhlY3V0aW9uOiAgICAgbWV0aG9kTmFtZSxcbiAgICB9KS5nZXRDb21tYW5kKCk7XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVPcHRpb25zT2JqZWN0IChvcHRzOiBTa2lwSnNFcnJvcnNPcHRpb25zT2JqZWN0KTogU2tpcEpzRXJyb3JzT3B0aW9uc09iamVjdCB7XG4gICAgb3B0cy5tZXNzYWdlID0gcGFyc2VSZWdFeHBTdHJpbmcob3B0cy5tZXNzYWdlKTtcbiAgICBvcHRzLnN0YWNrICAgPSBwYXJzZVJlZ0V4cFN0cmluZyhvcHRzLnN0YWNrKTtcbiAgICBvcHRzLnBhZ2VVcmwgPSBwYXJzZVJlZ0V4cFN0cmluZyhvcHRzLnBhZ2VVcmwpO1xuXG4gICAgcmV0dXJuIG9wdHM7XG59XG4iXX0=