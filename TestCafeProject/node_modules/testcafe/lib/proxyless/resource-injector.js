"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const connection_1 = __importDefault(require("../browser/connection"));
const injectables_1 = require("../assets/injectables");
const about_blank_page_markup_1 = __importDefault(require("./about-blank-page-markup"));
const lodash_1 = require("lodash");
const HTTP_STATUS_OK = 200;
const ALL_DOCUMENT_RESPONSES = {
    urlPattern: '*',
    resourceType: 'Document',
    requestStage: 'Response',
};
const CONTENT_SECURITY_POLICY_HEADER_NAMES = [
    'content-security-policy',
    'content-security-policy-report-only',
];
class ResourceInjector {
    constructor(browserId) {
        this._browserId = browserId;
    }
    _getResponseAsString(response) {
        return response.base64Encoded
            ? Buffer.from(response.body, 'base64').toString()
            : response.body;
    }
    _isServicePage(url) {
        const browserConnection = connection_1.default.getById(this._browserId);
        const proxy = browserConnection.browserConnectionGateway.proxy;
        return url.startsWith(proxy.server1Info.domain);
    }
    async _prepareInjectableResources() {
        const browserConnection = connection_1.default.getById(this._browserId);
        const proxy = browserConnection.browserConnectionGateway.proxy;
        const windowId = browserConnection.activeWindowId;
        const taskScript = await browserConnection.currentJob.currentTestRun.session.getTaskScript({
            referer: '',
            cookieUrl: '',
            isIframe: false,
            withPayload: true,
            serverInfo: proxy.server1Info,
            windowId,
        });
        const injectableResources = {
            stylesheets: [
                injectables_1.TESTCAFE_UI_STYLES,
            ],
            scripts: [
                ...testcafe_hammerhead_1.INJECTABLE_SCRIPTS,
                ...injectables_1.SCRIPTS,
            ],
            embeddedScripts: [taskScript],
        };
        injectableResources.scripts = injectableResources.scripts.map(script => proxy.resolveRelativeServiceUrl(script));
        injectableResources.stylesheets = injectableResources.stylesheets.map(style => proxy.resolveRelativeServiceUrl(style));
        return injectableResources;
    }
    _processResponseHeaders(headers) {
        if (!headers)
            return [];
        (0, lodash_1.remove)(headers, header => CONTENT_SECURITY_POLICY_HEADER_NAMES.includes(header.name));
        return headers;
    }
    async _handleHTTPPages(client) {
        await client.Fetch.enable({ patterns: [ALL_DOCUMENT_RESPONSES] });
        client.Fetch.on('requestPaused', async (params) => {
            const { requestId, responseHeaders, responseStatusCode, } = params;
            if (this._isServicePage(params.request.url))
                await client.Fetch.continueRequest({ requestId });
            else {
                const responseObj = await client.Fetch.getResponseBody({ requestId });
                const responseStr = this._getResponseAsString(responseObj);
                const injectableResources = await this._prepareInjectableResources();
                const updatedResponseStr = (0, testcafe_hammerhead_1.injectResources)(responseStr, injectableResources);
                await client.Fetch.fulfillRequest({
                    requestId,
                    responseCode: responseStatusCode || HTTP_STATUS_OK,
                    responseHeaders: this._processResponseHeaders(responseHeaders),
                    body: Buffer.from(updatedResponseStr).toString('base64'),
                });
            }
        });
    }
    _topFrameNavigationToAboutBlank(event) {
        if (event.frame.url !== testcafe_hammerhead_1.SPECIAL_BLANK_PAGE)
            return false;
        if (event.type !== 'Navigation')
            return false;
        if (event.frame.parentId)
            return false;
        return true;
    }
    async _handleAboutBlankPage(client) {
        await client.Page.enable();
        client.Page.on('frameNavigated', async (params) => {
            if (!this._topFrameNavigationToAboutBlank(params))
                return;
            const injectableResources = await this._prepareInjectableResources();
            const html = (0, testcafe_hammerhead_1.injectResources)(about_blank_page_markup_1.default, injectableResources);
            await client.Page.setDocumentContent({
                frameId: params.frame.id,
                html,
            });
        });
    }
    async setup(client) {
        await this._handleHTTPPages(client);
        await this._handleAboutBlankPage(client);
    }
}
exports.default = ResourceInjector;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,