"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isIPCResponsePacket = exports.isIPCErrorResponse = exports.isTestCafeErrorList = exports.IPCTransportEvents = exports.IPCPacketType = void 0;
const error_list_1 = __importDefault(require("../../../errors/error-list"));
var IPCPacketType;
(function (IPCPacketType) {
    IPCPacketType[IPCPacketType["request"] = 0] = "request";
    IPCPacketType[IPCPacketType["response"] = 1] = "response";
})(IPCPacketType = exports.IPCPacketType || (exports.IPCPacketType = {}));
var IPCTransportEvents;
(function (IPCTransportEvents) {
    IPCTransportEvents["data"] = "data";
})(IPCTransportEvents = exports.IPCTransportEvents || (exports.IPCTransportEvents = {}));
function isTestCafeErrorList(err) {
    return err.name === error_list_1.default.name;
}
exports.isTestCafeErrorList = isTestCafeErrorList;
function isIPCErrorResponse(response) {
    return !!response.error;
}
exports.isIPCErrorResponse = isIPCErrorResponse;
function isIPCResponsePacket(message) {
    return ['id', 'type', 'sync', 'data'].every(prop => prop in message);
}
exports.isIPCResponsePacket = isIPCResponsePacket;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlcy91dGlscy9pcGMvaW50ZXJmYWNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQSw0RUFBMkQ7QUFLM0QsSUFBWSxhQUdYO0FBSEQsV0FBWSxhQUFhO0lBQ3JCLHVEQUFPLENBQUE7SUFDUCx5REFBUSxDQUFBO0FBQ1osQ0FBQyxFQUhXLGFBQWEsR0FBYixxQkFBYSxLQUFiLHFCQUFhLFFBR3hCO0FBZ0NELElBQVksa0JBRVg7QUFGRCxXQUFZLGtCQUFrQjtJQUMxQixtQ0FBYSxDQUFBO0FBQ2pCLENBQUMsRUFGVyxrQkFBa0IsR0FBbEIsMEJBQWtCLEtBQWxCLDBCQUFrQixRQUU3QjtBQVlELFNBQWdCLG1CQUFtQixDQUFFLEdBQWtCO0lBQ25ELE9BQVEsR0FBeUIsQ0FBQyxJQUFJLEtBQUssb0JBQWlCLENBQUMsSUFBSSxDQUFDO0FBQ3RFLENBQUM7QUFGRCxrREFFQztBQUVELFNBQWdCLGtCQUFrQixDQUFFLFFBQWtEO0lBQ2xGLE9BQU8sQ0FBQyxDQUFFLFFBQTZCLENBQUMsS0FBSyxDQUFDO0FBQ2xELENBQUM7QUFGRCxnREFFQztBQUVELFNBQWdCLG1CQUFtQixDQUFFLE9BQWU7SUFDaEQsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsQ0FBQztBQUN6RSxDQUFDO0FBRkQsa0RBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVbnN1YnNjcmliZUZuIH0gZnJvbSAnZW1pdHRlcnknO1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuLi8uLi8uLi91dGlscy9hc3luYy1ldmVudC1lbWl0dGVyJztcbmltcG9ydCBUZXN0Q2FmZUVycm9yTGlzdCBmcm9tICcuLi8uLi8uLi9lcnJvcnMvZXJyb3ItbGlzdCc7XG5cblxuZXhwb3J0IHR5cGUgRXh0ZXJuYWxFcnJvciA9IEVycm9yIHwgVGVzdENhZmVFcnJvckxpc3Q7XG5cbmV4cG9ydCBlbnVtIElQQ1BhY2tldFR5cGUge1xuICAgIHJlcXVlc3QsXG4gICAgcmVzcG9uc2Vcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUENQYWNrZXQge1xuICAgIGlkOiBudW1iZXI7XG4gICAgdHlwZTogSVBDUGFja2V0VHlwZTtcbiAgICBzeW5jOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQQ1JlcXVlc3REYXRhIHtcbiAgICBuYW1lOiBzdHJpbmc7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGFyZ3M6IGFueVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQQ1JlcXVlc3RQYWNrZXQgZXh0ZW5kcyBJUENQYWNrZXQge1xuICAgIGRhdGE6IElQQ1JlcXVlc3REYXRhO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQQ1N1Y2Nlc3NmdWxSZXNwb25zZSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICByZXN1bHQ6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUENFcnJvclJlc3BvbnNlIHtcbiAgICBlcnJvcjogRXh0ZXJuYWxFcnJvcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUENSZXNwb25zZVBhY2tldCBleHRlbmRzIElQQ1BhY2tldCB7XG4gICAgZGF0YTogSVBDU3VjY2Vzc2Z1bFJlc3BvbnNlIHwgSVBDRXJyb3JSZXNwb25zZTtcbn1cblxuZXhwb3J0IGVudW0gSVBDVHJhbnNwb3J0RXZlbnRzIHtcbiAgICBkYXRhID0gJ2RhdGEnXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBDVHJhbnNwb3J0IGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgICBvbihldmVudDogSVBDVHJhbnNwb3J0RXZlbnRzLmRhdGEsIGhhbmRsZXI6IChkYXRhOiBJUENQYWNrZXQpID0+IFByb21pc2U8dm9pZD4pOiBVbnN1YnNjcmliZUZuO1xuXG4gICAgcmVhZCgpOiB2b2lkO1xuICAgIHdyaXRlKHBhY2tldDogSVBDUGFja2V0KTogUHJvbWlzZTx2b2lkPjtcblxuICAgIHJlYWRTeW5jKCk6IElQQ1Jlc3BvbnNlUGFja2V0O1xuICAgIHdyaXRlU3luYyhwYWNrZXQ6IElQQ1BhY2tldCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Rlc3RDYWZlRXJyb3JMaXN0IChlcnI6IEV4dGVybmFsRXJyb3IpOiBlcnIgaXMgVGVzdENhZmVFcnJvckxpc3Qge1xuICAgIHJldHVybiAoZXJyIGFzIFRlc3RDYWZlRXJyb3JMaXN0KS5uYW1lID09PSBUZXN0Q2FmZUVycm9yTGlzdC5uYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJUENFcnJvclJlc3BvbnNlIChyZXNwb25zZTogSVBDU3VjY2Vzc2Z1bFJlc3BvbnNlIHwgSVBDRXJyb3JSZXNwb25zZSk6IHJlc3BvbnNlIGlzIElQQ0Vycm9yUmVzcG9uc2Uge1xuICAgIHJldHVybiAhIShyZXNwb25zZSBhcyBJUENFcnJvclJlc3BvbnNlKS5lcnJvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSVBDUmVzcG9uc2VQYWNrZXQgKG1lc3NhZ2U6IG9iamVjdCk6IG1lc3NhZ2UgaXMgSVBDUmVzcG9uc2VQYWNrZXQge1xuICAgIHJldHVybiBbJ2lkJywgJ3R5cGUnLCAnc3luYycsICdkYXRhJ10uZXZlcnkocHJvcCA9PiBwcm9wIGluIG1lc3NhZ2UpO1xufVxuIl19