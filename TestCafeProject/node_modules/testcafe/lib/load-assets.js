"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const read_file_relative_1 = require("read-file-relative");
const ASSETS_CACHE = {};
function loadAsset(filename, asBuffer) {
    if (!ASSETS_CACHE[filename])
        ASSETS_CACHE[filename] = (0, read_file_relative_1.readSync)(filename, asBuffer);
    return ASSETS_CACHE[filename];
}
function default_1(developmentMode) {
    const scriptNameSuffix = developmentMode ? 'js' : 'min.js';
    return {
        favIcon: loadAsset('./client/ui/favicon.ico', true),
        coreScript: loadAsset(`./client/core/index.${scriptNameSuffix}`),
        driverScript: loadAsset(`./client/driver/index.${scriptNameSuffix}`),
        uiScript: loadAsset(`./client/ui/index.${scriptNameSuffix}`),
        uiStyle: loadAsset('./client/ui/styles.css'),
        uiSprite: loadAsset('./client/ui/sprite.png', true),
        uiSpriteSvg: loadAsset('./client/ui/sprite.svg', true),
        idlePageScript: loadAsset('./client/browser/idle-page/index.js'),
        idlePageStyle: loadAsset('./client/browser/idle-page/styles.css'),
        idlePageLogo: loadAsset('./client/browser/idle-page/logo.svg', true),
        serviceWorkerScript: loadAsset('./client/browser/service-worker.js'),
        automationScript: loadAsset(`./client/automation/index.${scriptNameSuffix}`),
        // NOTE: Load the legacy client script lazily to reduce startup time
        legacyRunnerScript: require('testcafe-legacy-api').CLIENT_RUNNER_SCRIPT,
    };
}
exports.default = default_1;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1hc3NldHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbG9hZC1hc3NldHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyREFBc0Q7QUFHdEQsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDO0FBRXhCLFNBQVMsU0FBUyxDQUFFLFFBQVEsRUFBRSxRQUFRO0lBQ2xDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDO1FBQ3ZCLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFBLDZCQUFJLEVBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRXRELE9BQU8sWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2xDLENBQUM7QUFFRCxtQkFBeUIsZUFBZTtJQUNwQyxNQUFNLGdCQUFnQixHQUFHLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFFM0QsT0FBTztRQUNILE9BQU8sRUFBTyxTQUFTLENBQUMseUJBQXlCLEVBQUUsSUFBSSxDQUFDO1FBQ3hELFVBQVUsRUFBSSxTQUFTLENBQUMsdUJBQXVCLGdCQUFnQixFQUFFLENBQUM7UUFDbEUsWUFBWSxFQUFFLFNBQVMsQ0FBQyx5QkFBeUIsZ0JBQWdCLEVBQUUsQ0FBQztRQUNwRSxRQUFRLEVBQU0sU0FBUyxDQUFDLHFCQUFxQixnQkFBZ0IsRUFBRSxDQUFDO1FBQ2hFLE9BQU8sRUFBTyxTQUFTLENBQUMsd0JBQXdCLENBQUM7UUFDakQsUUFBUSxFQUFNLFNBQVMsQ0FBQyx3QkFBd0IsRUFBRSxJQUFJLENBQUM7UUFDdkQsV0FBVyxFQUFHLFNBQVMsQ0FBQyx3QkFBd0IsRUFBRSxJQUFJLENBQUM7UUFFdkQsY0FBYyxFQUFFLFNBQVMsQ0FBQyxxQ0FBcUMsQ0FBQztRQUNoRSxhQUFhLEVBQUcsU0FBUyxDQUFDLHVDQUF1QyxDQUFDO1FBQ2xFLFlBQVksRUFBSSxTQUFTLENBQUMscUNBQXFDLEVBQUUsSUFBSSxDQUFDO1FBRXRFLG1CQUFtQixFQUFFLFNBQVMsQ0FBQyxvQ0FBb0MsQ0FBQztRQUVwRSxnQkFBZ0IsRUFBRSxTQUFTLENBQUMsNkJBQTZCLGdCQUFnQixFQUFFLENBQUM7UUFFNUUsb0VBQW9FO1FBQ3BFLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLG9CQUFvQjtLQUMxRSxDQUFDO0FBQ04sQ0FBQztBQXZCRCw0QkF1QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZWFkU3luYyBhcyByZWFkIH0gZnJvbSAncmVhZC1maWxlLXJlbGF0aXZlJztcblxuXG5jb25zdCBBU1NFVFNfQ0FDSEUgPSB7fTtcblxuZnVuY3Rpb24gbG9hZEFzc2V0IChmaWxlbmFtZSwgYXNCdWZmZXIpIHtcbiAgICBpZiAoIUFTU0VUU19DQUNIRVtmaWxlbmFtZV0pXG4gICAgICAgIEFTU0VUU19DQUNIRVtmaWxlbmFtZV0gPSByZWFkKGZpbGVuYW1lLCBhc0J1ZmZlcik7XG5cbiAgICByZXR1cm4gQVNTRVRTX0NBQ0hFW2ZpbGVuYW1lXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGRldmVsb3BtZW50TW9kZSkge1xuICAgIGNvbnN0IHNjcmlwdE5hbWVTdWZmaXggPSBkZXZlbG9wbWVudE1vZGUgPyAnanMnIDogJ21pbi5qcyc7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBmYXZJY29uOiAgICAgIGxvYWRBc3NldCgnLi9jbGllbnQvdWkvZmF2aWNvbi5pY28nLCB0cnVlKSxcbiAgICAgICAgY29yZVNjcmlwdDogICBsb2FkQXNzZXQoYC4vY2xpZW50L2NvcmUvaW5kZXguJHtzY3JpcHROYW1lU3VmZml4fWApLFxuICAgICAgICBkcml2ZXJTY3JpcHQ6IGxvYWRBc3NldChgLi9jbGllbnQvZHJpdmVyL2luZGV4LiR7c2NyaXB0TmFtZVN1ZmZpeH1gKSxcbiAgICAgICAgdWlTY3JpcHQ6ICAgICBsb2FkQXNzZXQoYC4vY2xpZW50L3VpL2luZGV4LiR7c2NyaXB0TmFtZVN1ZmZpeH1gKSxcbiAgICAgICAgdWlTdHlsZTogICAgICBsb2FkQXNzZXQoJy4vY2xpZW50L3VpL3N0eWxlcy5jc3MnKSxcbiAgICAgICAgdWlTcHJpdGU6ICAgICBsb2FkQXNzZXQoJy4vY2xpZW50L3VpL3Nwcml0ZS5wbmcnLCB0cnVlKSxcbiAgICAgICAgdWlTcHJpdGVTdmc6ICBsb2FkQXNzZXQoJy4vY2xpZW50L3VpL3Nwcml0ZS5zdmcnLCB0cnVlKSxcblxuICAgICAgICBpZGxlUGFnZVNjcmlwdDogbG9hZEFzc2V0KCcuL2NsaWVudC9icm93c2VyL2lkbGUtcGFnZS9pbmRleC5qcycpLFxuICAgICAgICBpZGxlUGFnZVN0eWxlOiAgbG9hZEFzc2V0KCcuL2NsaWVudC9icm93c2VyL2lkbGUtcGFnZS9zdHlsZXMuY3NzJyksXG4gICAgICAgIGlkbGVQYWdlTG9nbzogICBsb2FkQXNzZXQoJy4vY2xpZW50L2Jyb3dzZXIvaWRsZS1wYWdlL2xvZ28uc3ZnJywgdHJ1ZSksXG5cbiAgICAgICAgc2VydmljZVdvcmtlclNjcmlwdDogbG9hZEFzc2V0KCcuL2NsaWVudC9icm93c2VyL3NlcnZpY2Utd29ya2VyLmpzJyksXG5cbiAgICAgICAgYXV0b21hdGlvblNjcmlwdDogbG9hZEFzc2V0KGAuL2NsaWVudC9hdXRvbWF0aW9uL2luZGV4LiR7c2NyaXB0TmFtZVN1ZmZpeH1gKSxcblxuICAgICAgICAvLyBOT1RFOiBMb2FkIHRoZSBsZWdhY3kgY2xpZW50IHNjcmlwdCBsYXppbHkgdG8gcmVkdWNlIHN0YXJ0dXAgdGltZVxuICAgICAgICBsZWdhY3lSdW5uZXJTY3JpcHQ6IHJlcXVpcmUoJ3Rlc3RjYWZlLWxlZ2FjeS1hcGknKS5DTElFTlRfUlVOTkVSX1NDUklQVCxcbiAgICB9O1xufVxuIl19