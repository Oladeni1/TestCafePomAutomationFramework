"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_family_1 = __importDefault(require("os-family"));
const base_1 = __importDefault(require("../base"));
const runtime_info_1 = __importDefault(require("./runtime-info"));
const config_1 = __importDefault(require("./config"));
const local_firefox_1 = require("./local-firefox");
const marionette_client_1 = __importDefault(require("./marionette-client"));
exports.default = Object.assign(Object.assign({}, base_1.default), { getConfig(name) {
        return (0, config_1.default)(name);
    },
    _getBrowserProtocolClient(runtimeInfo) {
        return runtimeInfo.marionetteClient;
    },
    async _createMarionetteClient(runtimeInfo) {
        try {
            const marionetteClient = new marionette_client_1.default(runtimeInfo.marionettePort, runtimeInfo);
            await marionetteClient.connect();
            return marionetteClient;
        }
        catch (e) {
            return null;
        }
    },
    async openBrowser(browserId, pageUrl, config, disableMultipleWindows) {
        const runtimeInfo = await (0, runtime_info_1.default)(config);
        runtimeInfo.browserName = this._getBrowserName();
        runtimeInfo.browserId = browserId;
        runtimeInfo.windowDescriptors = {};
        await (0, local_firefox_1.start)(pageUrl, runtimeInfo);
        await this.waitForConnectionReady(runtimeInfo.browserId);
        if (!disableMultipleWindows)
            runtimeInfo.activeWindowId = this.calculateWindowId();
        if (runtimeInfo.marionettePort)
            runtimeInfo.marionetteClient = await this._createMarionetteClient(runtimeInfo);
        this.openedBrowsers[browserId] = runtimeInfo;
    },
    async closeBrowser(browserId) {
        const runtimeInfo = this.openedBrowsers[browserId];
        const { config, marionetteClient } = runtimeInfo;
        if (config.headless)
            await marionetteClient.quit();
        else
            await this.closeLocalBrowser(browserId);
        if (os_family_1.default.mac && !config.headless)
            await (0, local_firefox_1.stop)(runtimeInfo);
        if (runtimeInfo.tempProfileDir)
            await runtimeInfo.tempProfileDir.dispose();
        delete this.openedBrowsers[browserId];
    },
    async resizeWindow(browserId, width, height) {
        const { marionetteClient } = this.openedBrowsers[browserId];
        await marionetteClient.setWindowSize(width, height);
    },
    async getVideoFrameData(browserId) {
        const { marionetteClient } = this.openedBrowsers[browserId];
        return marionetteClient.getScreenshotData();
    },
    async hasCustomActionForBrowser(browserId) {
        const { config, marionetteClient } = this.openedBrowsers[browserId];
        return {
            hasCloseBrowser: true,
            hasTakeScreenshot: !!marionetteClient,
            hasChromelessScreenshots: !!marionetteClient,
            hasGetVideoFrameData: !!marionetteClient,
            hasResizeWindow: !!marionetteClient && config.headless,
            hasMaximizeWindow: !!marionetteClient && config.headless,
            hasCanResizeWindowToDimensions: false,
        };
    } });
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvYnJvd3Nlci9wcm92aWRlci9idWlsdC1pbi9kZWRpY2F0ZWQvZmlyZWZveC9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDBEQUEyQjtBQUMzQixtREFBNEM7QUFDNUMsa0VBQTRDO0FBQzVDLHNEQUFpQztBQUNqQyxtREFBdUY7QUFDdkYsNEVBQW1EO0FBR25ELGtEQUNPLGNBQXFCLEtBRXhCLFNBQVMsQ0FBRSxJQUFJO1FBQ1gsT0FBTyxJQUFBLGdCQUFTLEVBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELHlCQUF5QixDQUFFLFdBQVc7UUFDbEMsT0FBTyxXQUFXLENBQUMsZ0JBQWdCLENBQUM7SUFDeEMsQ0FBQztJQUVELEtBQUssQ0FBQyx1QkFBdUIsQ0FBRSxXQUFXO1FBQ3RDLElBQUk7WUFDQSxNQUFNLGdCQUFnQixHQUFHLElBQUksMkJBQWdCLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxXQUFXLENBQUMsQ0FBQztZQUV2RixNQUFNLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRWpDLE9BQU8sZ0JBQWdCLENBQUM7U0FDM0I7UUFDRCxPQUFPLENBQUMsRUFBRTtZQUNOLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLFdBQVcsQ0FBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxzQkFBc0I7UUFDakUsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFBLHNCQUFjLEVBQUMsTUFBTSxDQUFDLENBQUM7UUFFakQsV0FBVyxDQUFDLFdBQVcsR0FBUyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDdkQsV0FBVyxDQUFDLFNBQVMsR0FBVyxTQUFTLENBQUM7UUFDMUMsV0FBVyxDQUFDLGlCQUFpQixHQUFHLEVBQUUsQ0FBQztRQUVuQyxNQUFNLElBQUEscUJBQWlCLEVBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRTlDLE1BQU0sSUFBSSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUV6RCxJQUFJLENBQUMsc0JBQXNCO1lBQ3ZCLFdBQVcsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFFMUQsSUFBSSxXQUFXLENBQUMsY0FBYztZQUMxQixXQUFXLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLENBQUMsdUJBQXVCLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFbkYsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsR0FBRyxXQUFXLENBQUM7SUFDakQsQ0FBQztJQUVELEtBQUssQ0FBQyxZQUFZLENBQUUsU0FBUztRQUN6QixNQUFNLFdBQVcsR0FBb0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwRSxNQUFNLEVBQUUsTUFBTSxFQUFFLGdCQUFnQixFQUFFLEdBQUcsV0FBVyxDQUFDO1FBRWpELElBQUksTUFBTSxDQUFDLFFBQVE7WUFDZixNQUFNLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDOztZQUU5QixNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUU1QyxJQUFJLG1CQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVE7WUFDMUIsTUFBTSxJQUFBLG9CQUFnQixFQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRXhDLElBQUksV0FBVyxDQUFDLGNBQWM7WUFDMUIsTUFBTSxXQUFXLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRS9DLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsS0FBSyxDQUFDLFlBQVksQ0FBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU07UUFDeEMsTUFBTSxFQUFFLGdCQUFnQixFQUFFLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUU1RCxNQUFNLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELEtBQUssQ0FBQyxpQkFBaUIsQ0FBRSxTQUFTO1FBQzlCLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFNUQsT0FBTyxnQkFBZ0IsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ2hELENBQUM7SUFFRCxLQUFLLENBQUMseUJBQXlCLENBQUUsU0FBUztRQUN0QyxNQUFNLEVBQUUsTUFBTSxFQUFFLGdCQUFnQixFQUFFLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVwRSxPQUFPO1lBQ0gsZUFBZSxFQUFpQixJQUFJO1lBQ3BDLGlCQUFpQixFQUFlLENBQUMsQ0FBQyxnQkFBZ0I7WUFDbEQsd0JBQXdCLEVBQVEsQ0FBQyxDQUFDLGdCQUFnQjtZQUNsRCxvQkFBb0IsRUFBWSxDQUFDLENBQUMsZ0JBQWdCO1lBQ2xELGVBQWUsRUFBaUIsQ0FBQyxDQUFDLGdCQUFnQixJQUFJLE1BQU0sQ0FBQyxRQUFRO1lBQ3JFLGlCQUFpQixFQUFlLENBQUMsQ0FBQyxnQkFBZ0IsSUFBSSxNQUFNLENBQUMsUUFBUTtZQUNyRSw4QkFBOEIsRUFBRSxLQUFLO1NBQ3hDLENBQUM7SUFDTixDQUFDLElBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgT1MgZnJvbSAnb3MtZmFtaWx5JztcbmltcG9ydCBkZWRpY2F0ZWRQcm92aWRlckJhc2UgZnJvbSAnLi4vYmFzZSc7XG5pbXBvcnQgZ2V0UnVudGltZUluZm8gZnJvbSAnLi9ydW50aW1lLWluZm8nO1xuaW1wb3J0IGdldENvbmZpZyBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBzdGFydCBhcyBzdGFydExvY2FsRmlyZWZveCwgc3RvcCBhcyBzdG9wTG9jYWxGaXJlZm94IH0gZnJvbSAnLi9sb2NhbC1maXJlZm94JztcbmltcG9ydCBNYXJpb25ldHRlQ2xpZW50IGZyb20gJy4vbWFyaW9uZXR0ZS1jbGllbnQnO1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICAuLi5kZWRpY2F0ZWRQcm92aWRlckJhc2UsXG5cbiAgICBnZXRDb25maWcgKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGdldENvbmZpZyhuYW1lKTtcbiAgICB9LFxuXG4gICAgX2dldEJyb3dzZXJQcm90b2NvbENsaWVudCAocnVudGltZUluZm8pIHtcbiAgICAgICAgcmV0dXJuIHJ1bnRpbWVJbmZvLm1hcmlvbmV0dGVDbGllbnQ7XG4gICAgfSxcblxuICAgIGFzeW5jIF9jcmVhdGVNYXJpb25ldHRlQ2xpZW50IChydW50aW1lSW5mbykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgbWFyaW9uZXR0ZUNsaWVudCA9IG5ldyBNYXJpb25ldHRlQ2xpZW50KHJ1bnRpbWVJbmZvLm1hcmlvbmV0dGVQb3J0LCBydW50aW1lSW5mbyk7XG5cbiAgICAgICAgICAgIGF3YWl0IG1hcmlvbmV0dGVDbGllbnQuY29ubmVjdCgpO1xuXG4gICAgICAgICAgICByZXR1cm4gbWFyaW9uZXR0ZUNsaWVudDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgYXN5bmMgb3BlbkJyb3dzZXIgKGJyb3dzZXJJZCwgcGFnZVVybCwgY29uZmlnLCBkaXNhYmxlTXVsdGlwbGVXaW5kb3dzKSB7XG4gICAgICAgIGNvbnN0IHJ1bnRpbWVJbmZvID0gYXdhaXQgZ2V0UnVudGltZUluZm8oY29uZmlnKTtcblxuICAgICAgICBydW50aW1lSW5mby5icm93c2VyTmFtZSAgICAgICA9IHRoaXMuX2dldEJyb3dzZXJOYW1lKCk7XG4gICAgICAgIHJ1bnRpbWVJbmZvLmJyb3dzZXJJZCAgICAgICAgID0gYnJvd3NlcklkO1xuICAgICAgICBydW50aW1lSW5mby53aW5kb3dEZXNjcmlwdG9ycyA9IHt9O1xuXG4gICAgICAgIGF3YWl0IHN0YXJ0TG9jYWxGaXJlZm94KHBhZ2VVcmwsIHJ1bnRpbWVJbmZvKTtcblxuICAgICAgICBhd2FpdCB0aGlzLndhaXRGb3JDb25uZWN0aW9uUmVhZHkocnVudGltZUluZm8uYnJvd3NlcklkKTtcblxuICAgICAgICBpZiAoIWRpc2FibGVNdWx0aXBsZVdpbmRvd3MpXG4gICAgICAgICAgICBydW50aW1lSW5mby5hY3RpdmVXaW5kb3dJZCA9IHRoaXMuY2FsY3VsYXRlV2luZG93SWQoKTtcblxuICAgICAgICBpZiAocnVudGltZUluZm8ubWFyaW9uZXR0ZVBvcnQpXG4gICAgICAgICAgICBydW50aW1lSW5mby5tYXJpb25ldHRlQ2xpZW50ID0gYXdhaXQgdGhpcy5fY3JlYXRlTWFyaW9uZXR0ZUNsaWVudChydW50aW1lSW5mbyk7XG5cbiAgICAgICAgdGhpcy5vcGVuZWRCcm93c2Vyc1ticm93c2VySWRdID0gcnVudGltZUluZm87XG4gICAgfSxcblxuICAgIGFzeW5jIGNsb3NlQnJvd3NlciAoYnJvd3NlcklkKSB7XG4gICAgICAgIGNvbnN0IHJ1bnRpbWVJbmZvICAgICAgICAgICAgICAgICAgPSB0aGlzLm9wZW5lZEJyb3dzZXJzW2Jyb3dzZXJJZF07XG4gICAgICAgIGNvbnN0IHsgY29uZmlnLCBtYXJpb25ldHRlQ2xpZW50IH0gPSBydW50aW1lSW5mbztcblxuICAgICAgICBpZiAoY29uZmlnLmhlYWRsZXNzKVxuICAgICAgICAgICAgYXdhaXQgbWFyaW9uZXR0ZUNsaWVudC5xdWl0KCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2xvc2VMb2NhbEJyb3dzZXIoYnJvd3NlcklkKTtcblxuICAgICAgICBpZiAoT1MubWFjICYmICFjb25maWcuaGVhZGxlc3MpXG4gICAgICAgICAgICBhd2FpdCBzdG9wTG9jYWxGaXJlZm94KHJ1bnRpbWVJbmZvKTtcblxuICAgICAgICBpZiAocnVudGltZUluZm8udGVtcFByb2ZpbGVEaXIpXG4gICAgICAgICAgICBhd2FpdCBydW50aW1lSW5mby50ZW1wUHJvZmlsZURpci5kaXNwb3NlKCk7XG5cbiAgICAgICAgZGVsZXRlIHRoaXMub3BlbmVkQnJvd3NlcnNbYnJvd3NlcklkXTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVzaXplV2luZG93IChicm93c2VySWQsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgY29uc3QgeyBtYXJpb25ldHRlQ2xpZW50IH0gPSB0aGlzLm9wZW5lZEJyb3dzZXJzW2Jyb3dzZXJJZF07XG5cbiAgICAgICAgYXdhaXQgbWFyaW9uZXR0ZUNsaWVudC5zZXRXaW5kb3dTaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBnZXRWaWRlb0ZyYW1lRGF0YSAoYnJvd3NlcklkKSB7XG4gICAgICAgIGNvbnN0IHsgbWFyaW9uZXR0ZUNsaWVudCB9ID0gdGhpcy5vcGVuZWRCcm93c2Vyc1ticm93c2VySWRdO1xuXG4gICAgICAgIHJldHVybiBtYXJpb25ldHRlQ2xpZW50LmdldFNjcmVlbnNob3REYXRhKCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGhhc0N1c3RvbUFjdGlvbkZvckJyb3dzZXIgKGJyb3dzZXJJZCkge1xuICAgICAgICBjb25zdCB7IGNvbmZpZywgbWFyaW9uZXR0ZUNsaWVudCB9ID0gdGhpcy5vcGVuZWRCcm93c2Vyc1ticm93c2VySWRdO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoYXNDbG9zZUJyb3dzZXI6ICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBoYXNUYWtlU2NyZWVuc2hvdDogICAgICAgICAgICAgICEhbWFyaW9uZXR0ZUNsaWVudCxcbiAgICAgICAgICAgIGhhc0Nocm9tZWxlc3NTY3JlZW5zaG90czogICAgICAgISFtYXJpb25ldHRlQ2xpZW50LFxuICAgICAgICAgICAgaGFzR2V0VmlkZW9GcmFtZURhdGE6ICAgICAgICAgICAhIW1hcmlvbmV0dGVDbGllbnQsXG4gICAgICAgICAgICBoYXNSZXNpemVXaW5kb3c6ICAgICAgICAgICAgICAgICEhbWFyaW9uZXR0ZUNsaWVudCAmJiBjb25maWcuaGVhZGxlc3MsXG4gICAgICAgICAgICBoYXNNYXhpbWl6ZVdpbmRvdzogICAgICAgICAgICAgICEhbWFyaW9uZXR0ZUNsaWVudCAmJiBjb25maWcuaGVhZGxlc3MsXG4gICAgICAgICAgICBoYXNDYW5SZXNpemVXaW5kb3dUb0RpbWVuc2lvbnM6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH0sXG59O1xuIl19