"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isElementVisible = exports.isIframeVisible = exports.getWindowPosition = exports.isInRectangle = exports.getClientPosition = exports.findCenter = exports.getIframePointRelativeToParentFrame = exports.getEventPageCoordinates = exports.getEventAbsoluteCoordinates = exports.containsOffset = exports.getIframeClientCoordinates = exports.calcRelativePosition = exports.getElementFromPoint = exports.getClientDimensions = exports.offsetToClientCoords = exports.getOffsetPosition = exports.getElementRectangle = void 0;
const hammerhead_1 = __importDefault(require("../deps/hammerhead"));
const styleUtils = __importStar(require("./style"));
const domUtils = __importStar(require("./dom"));
const axis_values_1 = __importDefault(require("./values/axis-values"));
const boundary_values_1 = __importDefault(require("./values/boundary-values"));
const dimensions_1 = __importDefault(require("./values/dimensions"));
exports.getElementRectangle = hammerhead_1.default.utils.position.getElementRectangle;
exports.getOffsetPosition = hammerhead_1.default.utils.position.getOffsetPosition;
exports.offsetToClientCoords = hammerhead_1.default.utils.position.offsetToClientCoords;
function getClientDimensions(target) {
    const isHtmlElement = domUtils.isHtmlElement(target);
    const body = isHtmlElement ? target.getElementsByTagName('body')[0] : null;
    const elementRect = target.getBoundingClientRect();
    const elBorders = boundary_values_1.default.create(styleUtils.getBordersWidth(target));
    const elScroll = styleUtils.getElementScroll(target);
    const isElementInIframe = domUtils.isElementInIframe(target);
    const isCompatMode = target.ownerDocument.compatMode === 'BackCompat';
    const elPosition = isHtmlElement ? new axis_values_1.default(0, 0) : axis_values_1.default.create(elementRect);
    let elHeight = elementRect.height;
    let elWidth = elementRect.width;
    if (isHtmlElement) {
        if (body && isCompatMode) {
            elHeight = body.clientHeight;
            elWidth = body.clientWidth;
        }
        else {
            elHeight = target.clientHeight;
            elWidth = target.clientWidth;
        }
    }
    if (isElementInIframe) {
        const iframeElement = domUtils.getIframeByElement(target);
        if (iframeElement) {
            const iframeOffset = (0, exports.getOffsetPosition)(iframeElement);
            const clientOffset = (0, exports.offsetToClientCoords)(axis_values_1.default.create(iframeOffset));
            const iframeBorders = styleUtils.getBordersWidth(iframeElement);
            elPosition.add(clientOffset).add(axis_values_1.default.create(iframeBorders));
            if (isHtmlElement)
                elBorders.add(iframeBorders);
        }
    }
    const hasRightScrollbar = !isHtmlElement && styleUtils.getInnerWidth(target) !== target.clientWidth;
    const hasBottomScrollbar = !isHtmlElement && styleUtils.getInnerHeight(target) !== target.clientHeight;
    const scrollbar = {
        right: hasRightScrollbar ? domUtils.getScrollbarSize() : 0,
        bottom: hasBottomScrollbar ? domUtils.getScrollbarSize() : 0,
    };
    return new dimensions_1.default(elWidth, elHeight, elPosition, elBorders, elScroll, scrollbar);
}
exports.getClientDimensions = getClientDimensions;
function getElementFromPoint({ x, y }) {
    // @ts-ignore
    const ieFn = document.getElementFromPoint;
    const func = ieFn || document.elementFromPoint;
    let el = null;
    try {
        // Permission denied to access property 'getElementFromPoint' error in iframe
        el = func.call(document, x, y);
    }
    catch (_a) {
        return null;
    }
    //NOTE: elementFromPoint returns null when is's a border of an iframe
    if (el === null)
        el = func.call(document, x - 1, y - 1);
    while (el && el.shadowRoot && el.shadowRoot.elementFromPoint) {
        const shadowEl = el.shadowRoot.elementFromPoint(x, y);
        if (!shadowEl || el === shadowEl)
            break;
        el = shadowEl;
    }
    return el;
}
exports.getElementFromPoint = getElementFromPoint;
function calcRelativePosition(dimensions, toDimensions) {
    const pos = boundary_values_1.default.create({
        top: dimensions.top - toDimensions.top,
        left: dimensions.left - toDimensions.left,
        right: toDimensions.right - dimensions.right,
        bottom: toDimensions.bottom - dimensions.bottom,
    });
    return pos.sub(toDimensions.border).sub(toDimensions.scrollbar).round(Math.ceil, Math.floor);
}
exports.calcRelativePosition = calcRelativePosition;
function getIframeClientCoordinates(iframe) {
    const { left, top } = (0, exports.getOffsetPosition)(iframe);
    const clientPosition = (0, exports.offsetToClientCoords)({ x: left, y: top });
    const iframeBorders = styleUtils.getBordersWidth(iframe);
    const iframePadding = styleUtils.getElementPadding(iframe);
    const iframeRectangleLeft = clientPosition.x + iframeBorders.left + iframePadding.left;
    const iframeRectangleTop = clientPosition.y + iframeBorders.top + iframePadding.top;
    return new boundary_values_1.default(iframeRectangleTop, iframeRectangleLeft + styleUtils.getWidth(iframe), iframeRectangleTop + styleUtils.getHeight(iframe), iframeRectangleLeft);
}
exports.getIframeClientCoordinates = getIframeClientCoordinates;
function containsOffset(el, offsetX, offsetY) {
    const dimensions = getClientDimensions(el);
    const width = Math.max(el.scrollWidth, dimensions.width);
    const height = Math.max(el.scrollHeight, dimensions.height);
    const maxX = dimensions.scrollbar.right + dimensions.border.left + dimensions.border.right + width;
    const maxY = dimensions.scrollbar.bottom + dimensions.border.top + dimensions.border.bottom + height;
    return (typeof offsetX === 'undefined' || offsetX >= 0 && maxX >= offsetX) &&
        (typeof offsetY === 'undefined' || offsetY >= 0 && maxY >= offsetY);
}
exports.containsOffset = containsOffset;
function getEventAbsoluteCoordinates(ev) {
    const el = ev.target || ev.srcElement;
    const pageCoordinates = getEventPageCoordinates(ev);
    const curDocument = domUtils.findDocument(el);
    let xOffset = 0;
    let yOffset = 0;
    if (domUtils.isElementInIframe(curDocument.documentElement)) {
        const currentIframe = domUtils.getIframeByElement(curDocument);
        if (currentIframe) {
            const iframeOffset = (0, exports.getOffsetPosition)(currentIframe);
            const iframeBorders = styleUtils.getBordersWidth(currentIframe);
            xOffset = iframeOffset.left + iframeBorders.left;
            yOffset = iframeOffset.top + iframeBorders.top;
        }
    }
    return new axis_values_1.default(pageCoordinates.x + xOffset, pageCoordinates.y + yOffset);
}
exports.getEventAbsoluteCoordinates = getEventAbsoluteCoordinates;
function getEventPageCoordinates(ev) {
    const curCoordObject = /^touch/.test(ev.type) && ev.targetTouches ? ev.targetTouches[0] || ev.changedTouches[0] : ev;
    const bothPageCoordinatesAreZero = curCoordObject.pageX === 0 && curCoordObject.pageY === 0;
    const notBothClientCoordinatesAreZero = curCoordObject.clientX !== 0 || curCoordObject.clientY !== 0;
    if ((curCoordObject.pageX === null || bothPageCoordinatesAreZero && notBothClientCoordinatesAreZero) &&
        curCoordObject.clientX !== null) {
        const currentDocument = domUtils.findDocument(ev.target || ev.srcElement);
        const html = currentDocument.documentElement;
        const body = currentDocument.body;
        return new axis_values_1.default(Math.round(curCoordObject.clientX + (html && html.scrollLeft || body && body.scrollLeft || 0) -
            (html.clientLeft || 0)), Math.round(curCoordObject.clientY + (html && html.scrollTop || body && body.scrollTop || 0) -
            (html.clientTop || 0)));
    }
    return new axis_values_1.default(Math.round(curCoordObject.pageX), Math.round(curCoordObject.pageY));
}
exports.getEventPageCoordinates = getEventPageCoordinates;
function getIframePointRelativeToParentFrame(pos, iframeWin) {
    const iframe = domUtils.findIframeByWindow(iframeWin);
    const iframeOffset = (0, exports.getOffsetPosition)(iframe);
    const iframeBorders = styleUtils.getBordersWidth(iframe);
    const iframePadding = styleUtils.getElementPadding(iframe);
    return (0, exports.offsetToClientCoords)({
        x: pos.x + iframeOffset.left + iframeBorders.left + iframePadding.left,
        y: pos.y + iframeOffset.top + iframeBorders.top + iframePadding.top,
    });
}
exports.getIframePointRelativeToParentFrame = getIframePointRelativeToParentFrame;
function findCenter(el) {
    const rectangle = (0, exports.getElementRectangle)(el);
    return new axis_values_1.default(Math.round(rectangle.left + rectangle.width / 2), Math.round(rectangle.top + rectangle.height / 2));
}
exports.findCenter = findCenter;
function getClientPosition(el) {
    const { left, top } = (0, exports.getOffsetPosition)(el);
    const clientCoords = (0, exports.offsetToClientCoords)({ x: left, y: top });
    clientCoords.x = Math.round(clientCoords.x);
    clientCoords.y = Math.round(clientCoords.y);
    return clientCoords;
}
exports.getClientPosition = getClientPosition;
function isInRectangle({ x, y }, rectangle) {
    return x >= rectangle.left && x <= rectangle.right && y >= rectangle.top && y <= rectangle.bottom;
}
exports.isInRectangle = isInRectangle;
function getWindowPosition() {
    const x = window.screenLeft || window.screenX;
    const y = window.screenTop || window.screenY;
    return new axis_values_1.default(x, y);
}
exports.getWindowPosition = getWindowPosition;
function isIframeVisible(el) {
    return !hiddenUsingStyles(el);
}
exports.isIframeVisible = isIframeVisible;
function hiddenUsingStyles(el) {
    return styleUtils.get(el, 'visibility') === 'hidden' ||
        styleUtils.get(el, 'display') === 'none';
}
function hiddenByRectangle(el) {
    const elementRectangle = (0, exports.getElementRectangle)(el);
    return elementRectangle.width === 0 ||
        elementRectangle.height === 0;
}
function isElementVisible(el) {
    if (domUtils.isTextNode(el))
        return !styleUtils.isNotVisibleNode(el);
    if (!domUtils.isContentEditableElement(el) &&
        !domUtils.isSVGElement(el) &&
        hiddenByRectangle(el))
        return false;
    if (domUtils.isMapElement(el)) {
        const mapContainer = domUtils.getMapContainer(domUtils.closest(el, 'map'));
        return mapContainer ? isElementVisible(mapContainer) : false;
    }
    if (styleUtils.isSelectVisibleChild(el)) {
        const select = domUtils.getSelectParent(el);
        const childRealIndex = domUtils.getChildVisibleIndex(select, el);
        const realSelectSizeValue = styleUtils.getSelectElementSize(select);
        const topVisibleIndex = Math.max(styleUtils.getScrollTop(select) / styleUtils.getOptionHeight(select), 0);
        const bottomVisibleIndex = topVisibleIndex + realSelectSizeValue - 1;
        const optionVisibleIndex = Math.max(childRealIndex - topVisibleIndex, 0);
        return optionVisibleIndex >= topVisibleIndex && optionVisibleIndex <= bottomVisibleIndex;
    }
    if (domUtils.isSVGElement(el)) {
        const hiddenParent = domUtils.findParent(el, true, (parent) => {
            return hiddenUsingStyles(parent);
        });
        if (!hiddenParent)
            return !hiddenByRectangle(el);
        return false;
    }
    return styleUtils.hasDimensions(el) && !hiddenUsingStyles(el);
}
exports.isElementVisible = isElementVisible;
//# sourceMappingURL=data:application/json;base64,